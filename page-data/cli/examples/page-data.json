{"componentChunkName":"component---node-modules-gatsby-theme-document-src-templates-docs-js","path":"/cli/examples","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"CLI Examples\",\n  \"description\": \"Detailed examples for @phony/cli\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"graphql\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Graphql\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"phonyql\\n\")), mdx(\"h2\", {\n    \"id\": \"initialize-database\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Initialize Database\"), mdx(\"p\", null, \"Phony requires a local copy of your database to allow persisting the data\\nchanges via mutations.\\nTo make sure you always have a local copy you can add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--init,-i\"), \" flag.\\nThis will flush the database to a local copy if the file does not exist.\\nIf the file exists, this step is simply skipped.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"phonyql -i\\n\")), mdx(\"h2\", {\n    \"id\": \"flush-database\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Flush Database\"), mdx(\"p\", null, \"You might want to flush the database every time you restart the server.\\nAdding the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--flush,-f\"), \" flag makes sure your database is always reset to its\\ninitial state.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"phonyql -f\\n\")), mdx(\"h3\", {\n    \"id\": \"custom-input\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Custom input\"), mdx(\"p\", null, \"While Phony looks for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"db.js\"), \" file in your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cwd\"), \", you can specify a custom\\nfile as second argument. It can be helpful\\nwhen you need to run several servers or have a certain folder/file structure.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"phonyql my-database.js\\n## phonyql some/deep/folder/my-database.js\\n\")), mdx(\"h3\", {\n    \"id\": \"custom-output\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Custom output\"), mdx(\"p\", null, \"You can define the location of the local database with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--database,-d\"), \" flag.\\nThis will change the location and name of your local database. It can be helpful\\nwhen you need to run several servers or have a certain folder/file structure.\\nThe default file will be written to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[cwd]/db.json\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"phonyql --database  my-database.json\\nphonyql --database some/deep/folder/my-database.json\\n\")), mdx(\"h3\", {\n    \"id\": \"export-schema\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Export schema\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"phonyql --export\\nphonyql -e\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Export to custom file\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"phonyql --export --schema my-schema.graphql\\nphonyql --export --schema some/deep/folder/my-schema.graphql\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#graphql","title":"Graphql"},{"url":"#initialize-database","title":"Initialize Database"},{"url":"#flush-database","title":"Flush Database","items":[{"url":"#custom-input","title":"Custom input"},{"url":"#custom-output","title":"Custom output"},{"url":"#export-schema","title":"Export schema"}]}]},"frontmatter":{"title":"CLI Examples","description":"Detailed examples for @phony/cli"}}},"pageContext":{"id":"1d03d119-767a-5af3-b77b-7e0329bb1c5f"}}}
