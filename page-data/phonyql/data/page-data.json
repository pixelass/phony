{"componentChunkName":"component---node-modules-gatsby-theme-document-src-templates-docs-js","path":"/phonyql/data","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Data\",\n  \"description\": \"Phony builds a schema from your data\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"data-model\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Data model\"), mdx(\"p\", null, \"The first entry needs to have all properties defined while the second one only\\nneeds the required properties. Phony looks up the first entry and uses it to\\nbuild the type. If it does not appear in the second entry it is treated as\\noptional.\"), mdx(\"h3\", {\n    \"id\": \"database-setup\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Database setup\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"module.exports = {\\n    users: [\\n        {\\n            id: 123\\n            name: \\\"John Doe\\\",\\n            email: \\\"john@doe.com\\\"\\n        },\\n        {\\n            id: 456\\n            name: \\\"Jane Doe\\\",\\n        }\\n    ]\\n};\\n\")), mdx(\"h3\", {\n    \"id\": \"exposed-schema\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Exposed schema\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type Query {\\n    getUsers(pagination: Pagination): [User]\\n    getUser(id: ID!): User\\n    _getUsersMeta: MetaData\\n}\\n\\ntype Mutation {\\n    createUser(input: UserInput!): User\\n    updateUser(id: ID!, input: UserUpdateInput!): User\\n    deleteUser(id: ID!): Boolean\\n}\\n\\ninput Pagination {\\n    page: Int\\n    pageSize: Int\\n    sorting: Sorting\\n}\\n\\ninput Sorting {\\n    field: String!\\n    order: SortOrder!\\n}\\n\\nenum SortOrder {\\n    asc\\n    desc\\n}\\n\\ntype MetaData {\\n    count: Int!\\n}\\n\\ntype User {\\n    id: ID!\\n    name: String!\\n    email: String\\n}\\n\\ninput UserInput {\\n    name: String!\\n    email: String\\n}\\n\\ninput UserUpdateInput {\\n    name: String\\n    email: String\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"phony-generated-dates\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Phony generated dates\"), mdx(\"p\", null, \"Phony uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"created\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"updated\"), \" properties of entries. These are added\\nwhen mutations write to the local database.\\nIf you want to use them you should add them to your data so they will be picked\\nup by the query. If you don't need them they will simply be ignored.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"module.exports = {\\n    users: [\\n        {\\n            id: 123,\\n            name: \\\"John Doe\\\",\\n            email: \\\"john@doe.com\\\",\\n            created: new Date(),\\n            updated: new Date()\\n        },\\n        {\\n            id: 456,\\n            name: \\\"Jane Doe\\\",\\n            created: new Date()\\n        }\\n    ]\\n};\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Available on \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"User\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type User {\\n    name: String!\\n    id: ID!\\n    email: String\\n    created: String!\\n    updated: String\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"relationships\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Relationships\"), mdx(\"p\", null, \"Items from different collections can be linked with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_id\"), \" suffix.\"), mdx(\"h3\", {\n    \"id\": \"example-data\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Example Data\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"module.exports = {\\n    posts: [\\n        {\\n            id: 1,\\n            title: \\\"Lorem Ipsum\\\",\\n            user_id: 123\\n        },\\n        {\\n            id: 2,\\n            title: \\\"Sic Dolor amet\\\",\\n            user_id: 456\\n        }\\n    ],\\n    users: [\\n        {\\n            id: 123,\\n            name: \\\"John Doe\\\"\\n        },\\n        {\\n            id: 456,\\n            name: \\\"Jane Doe\\\"\\n        }\\n    ],\\n    comments: [\\n        {\\n            id: 987,\\n            post_id: 1,\\n            body: \\\"Consectetur adipiscing elit\\\"\\n        },\\n        {\\n            id: 995,\\n            post_id: 1,\\n            body: \\\"Nam molestie pellentesque dui\\\"\\n        }\\n    ]\\n};\\n\")), mdx(\"h3\", {\n    \"id\": \"many-to-one\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Many to One\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"{\\n    getPost(id: 1) {\\n        title\\n        User {\\n            name\\n        }\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n    \\\"data\\\": {\\n        \\\"getPost\\\": {\\n            \\\"title\\\": \\\"Lorem Ipsum\\\",\\n            \\\"User\\\": {\\n                \\\"name\\\": \\\"John Doe\\\"\\n            }\\n        }\\n    }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"one-to-many\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"One to Many\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"{\\n    getPost(id: 1) {\\n        title\\n        Comments {\\n            body\\n        }\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n    \\\"data\\\": {\\n        \\\"getPost\\\": {\\n            \\\"title\\\": \\\"Lorem Ipsum\\\",\\n            \\\"Comments\\\": [\\n                { \\\"body\\\": \\\"Consectetur adipiscing elit\\\" },\\n                { \\\"body\\\": \\\"Nam molestie pellentesque dui\\\" }\\n            ]\\n        }\\n    }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"special-prop-names\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Special prop names\"), mdx(\"p\", null, \"Phony has a few restrictions when naming properties in your entries.\"), mdx(\"p\", null, \"Phony looks for special names to determine if a property is required or how the\\ntype should be defined.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[name]_count\"), \": defines is a counter and should not be updated via user\\nmutations.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Example \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"view_count\"), \" can be read but not written (will not appear in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[name]UpdateInput\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[name]Input\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If you need a writable counter use something singular e.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"stock: 10\"), \"\\ninstead of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"item_count: 10\"), \".\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[name]_id\"), \": defines a relation. This value will be used to build relations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"__first\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"__second\"), \": these terms are used internally to determine if a\\nfield is required.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"created\"), \": defines the creation date of the entry. If you need access please\\nlist it in the first entry of your collection. Phony will write this property\\nwhen new items are added.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"updated\"), \": defines the update date of the entry. If you need access please\\nlist it in the first entry of your collection. Phony will write this property\\nwhen items are updated.\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#data-model","title":"Data model","items":[{"url":"#database-setup","title":"Database setup"},{"url":"#exposed-schema","title":"Exposed schema"}]},{"url":"#phony-generated-dates","title":"Phony generated dates"},{"url":"#relationships","title":"Relationships","items":[{"url":"#example-data","title":"Example Data"},{"url":"#many-to-one","title":"Many to One"},{"url":"#one-to-many","title":"One to Many"}]},{"url":"#special-prop-names","title":"Special prop names"}]},"frontmatter":{"title":"Data","description":"Phony builds a schema from your data"}}},"pageContext":{"id":"fa0e070c-ee78-5413-9dde-9980b8a67563"}}}