{"componentChunkName":"component---node-modules-gatsby-theme-phony-docs-src-templates-docs-js","path":"/phonyql/config","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Config\",\n  \"description\": \"Detailed config examples for @phony/cli\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"interface PonyConfig {\\n    queryConfig?: {\\n        get: {\\n            byId: string;\\n            all: string;\\n            meta: string;\\n        };\\n        post: {\\n            create: string;\\n            update: string;\\n            delete: string;\\n        };\\n        input: {\\n            filter: string;\\n            filterFields: string;\\n            create: string;\\n            update: string;\\n        };\\n        internalFields: {\\n            created: string;\\n            updated: string;\\n            views: string;\\n        };\\n    };\\n    schema?: string;\\n    input?: string;\\n    database?: string;\\n    port?: string | number;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"query-config\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Query Config\"), mdx(\"p\", null, \"the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryConfig\"), \" allows you to define names for your query types and inputs.\\nThe word \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" is used in different variations as a placeholder.\"), mdx(\"p\", null, \"for \\\"users\\\":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hello [name]!\"), \" => hello user!\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hello [Name]!\"), \" => hello User!\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hello [users]!\"), \" => hello users!\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hello [Users]!\"), \" => hello Users!\")), mdx(\"p\", null, \"If you expect \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getUserById\"), \" for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get.byId\"), \" method you can write: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get[Name]ById\"), \".\"), mdx(\"h3\", {\n    \"id\": \"internal-fields\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Internal Fields\"), mdx(\"p\", null, \"Phony writes two properties (updated, created) which can be defined vie the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"internalFields\"), \" property of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"queryConfig\"), \" object.\\nTo change the names, simply define them in your config.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"{\\n    created: \\\"createdAt\\\",\\n    updated: \\\"lastUpdate\\\"\\n}\\n\")), mdx(\"p\", null, \"You can also add fields from your data that should not appear in the update\\ninput. This can be helpful if you want to prevent certain fields from being\\nupdated.\"), mdx(\"p\", null, \"{\\nviews: \\\"views\\\",\\nupvotes: \\\"likes\\\",\\ndownvotes: \\\"dislikes\\\",\\nsecret: \\\"neverAllowChangingMe\\\"\\n}\"), mdx(\"h2\", {\n    \"id\": \"input\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Input\"), mdx(\"p\", null, \"This file is the input of your database.\"), mdx(\"h2\", {\n    \"id\": \"database\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Database\"), mdx(\"p\", null, \"This file is the output of your database.\"), mdx(\"h2\", {\n    \"id\": \"schema\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Schema\"), mdx(\"p\", null, \"This file is the output of the schema when exported.\"), mdx(\"h2\", {\n    \"id\": \"port\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Port\"), mdx(\"p\", null, \"The port on which graphql should run.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#query-config","title":"Query Config","items":[{"url":"#internal-fields","title":"Internal Fields"}]},{"url":"#input","title":"Input"},{"url":"#database","title":"Database"},{"url":"#schema","title":"Schema"},{"url":"#port","title":"Port"}]},"frontmatter":{"title":"Config","description":"Detailed config examples for @phony/cli"}}},"pageContext":{"id":"5589c0ae-2d64-59f4-9213-8e9469195109"}}}